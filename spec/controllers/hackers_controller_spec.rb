require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe HackersController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Hacker. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { first_name: 'test', last_name: 'name', school_id: 45,
      team_id: 47, email: 't@test.com', github: 'cell',
      password: 'ttest', password_confirmation: 'ttest' }
  }

  let(:invalid_attributes) {
    { first_name: 'test', school_id: 45,
      team_id: 47, email: 't@test.com', github: 'cell',
      password: 'ttest', password_confirmation: 'not_test' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # HackersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET index' do
    it 'assigns all hackers as @hackers' do
      hacker = Hacker.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:hackers)).to eq([hacker])
    end
  end

  describe 'GET show' do
    it 'assigns the requested hacker as @hacker' do
      hacker = Hacker.create! valid_attributes
      get :show, {:id => hacker.to_param}, valid_session
      expect(assigns(:hacker)).to eq(hacker)
    end
  end

  describe 'GET new' do
    it 'assigns a new hacker as @hacker' do
      get :new, {}, valid_session
      expect(assigns(:hacker)).to be_a_new(Hacker)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested hacker as @hacker' do
      hacker = Hacker.create! valid_attributes
      get :edit, {:id => hacker.to_param}, valid_session
      expect(assigns(:hacker)).to eq(hacker)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Hacker' do
        expect {
          post :create, {:hacker => valid_attributes}, valid_session
        }.to change(Hacker, :count).by(1)
      end

      it 'assigns a newly created hacker as @hacker' do
        post :create, {:hacker => valid_attributes}, valid_session
        expect(assigns(:hacker)).to be_a(Hacker)
        expect(assigns(:hacker)).to be_persisted
      end

      it 'redirects to the created hacker' do
        post :create, {:hacker => valid_attributes}, valid_session
        expect(response).to redirect_to(Hacker.last)
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved hacker as @hacker' do
        post :create, {:hacker => invalid_attributes}, valid_session
        expect(assigns(:hacker)).to be_a_new(Hacker)
      end

      it "re-renders the 'new' template" do
        post :create, {:hacker => invalid_attributes}, valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      let(:new_attributes) {
        {password: 'new_pass', password_confirmation: 'new_pass' }
      }

      let(:new_invalid_attributes){
        {password: 'new_pass', password_confirmation: 'old_pass' }
      }

      it 'updates the requested hacker' do
        hacker = Hacker.create! valid_attributes
        old = hacker.password_digest
        put :update, {:id => hacker.to_param, :hacker => new_attributes}, valid_session
        hacker.reload
        expect(hacker.password_digest).to_not eq(old);
      end

      it 'assigns the requested hacker as @hacker' do
        hacker = Hacker.create! valid_attributes
        put :update, {:id => hacker.to_param, :hacker => valid_attributes}, valid_session
        expect(assigns(:hacker)).to eq(hacker)
      end

      it 'redirects to the hacker' do
        hacker = Hacker.create! valid_attributes
        put :update, {:id => hacker.to_param, :hacker => valid_attributes}, valid_session
        expect(response).to redirect_to(hacker)
      end
    end

    describe 'with invalid params' do
      it 'assigns the hacker as @hacker' do
        hacker = Hacker.create! valid_attributes
        put :update, {:id => hacker.to_param, :hacker => new_invalid_attributes}, valid_session
        expect(assigns(:hacker)).to eq(hacker)
      end

      it "re-renders the 'edit' template" do
        hacker = Hacker.create! valid_attributes
        put :update, {:id => hacker.to_param, :hacker => new_invalid_attributes}, valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested hacker' do
      hacker = Hacker.create! valid_attributes
      expect {
        delete :destroy, {:id => hacker.to_param}, valid_session
      }.to change(Hacker, :count).by(-1)
    end

    it 'redirects to the hackers list' do
      hacker = Hacker.create! valid_attributes
      delete :destroy, {:id => hacker.to_param}, valid_session
      expect(response).to redirect_to(hackers_url)
    end
  end

end
